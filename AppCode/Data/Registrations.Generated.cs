// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Registrations.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Registrations
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Jobs/
// User:        2sic Web-Developer
// When:        2024-04-08 07:53:49Z
using System;
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for Registrations 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Registrations data. <br/>
  /// Generated 2024-04-08 07:53:49Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.ApplicationFile`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Registrations: AutoGenerated.ZagRegistrations
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Registrations in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagRegistrations: Custom.Data.CustomItem
  {
    /// <summary>
    /// ApplicationFile as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("ApplicationFile")
    /// </summary>
    public string ApplicationFile => _item.Url("ApplicationFile");

    /// <summary>
    /// Get the file object for ApplicationFile - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile ApplicationFileFile => _item.File("ApplicationFile");

    /// <summary>
    /// Get the folder object for ApplicationFile.
    /// </summary>
    public IFolder ApplicationFileFolder => _item.Folder("ApplicationFile");

    /// <summary>
    /// Country as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Country", scrubHtml: true) etc.
    /// </summary>
    public string Country => _item.String("Country", fallback: "");

    /// <summary>
    /// FirstName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FirstName", scrubHtml: true) etc.
    /// </summary>
    public string FirstName => _item.String("FirstName", fallback: "");

    /// <summary>
    /// Job as single item of Job.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type Job was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public Job Job => _job ??= _item.Child<Job>("Job");
    private Job _job;

    /// <summary>
    /// LastName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LastName", scrubHtml: true) etc.
    /// </summary>
    public string LastName => _item.String("LastName", fallback: "");

    /// <summary>
    /// Mail as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Mail", scrubHtml: true) etc.
    /// </summary>
    public string Mail => _item.String("Mail", fallback: "");

    /// <summary>
    /// MobilePhone as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MobilePhone", scrubHtml: true) etc.
    /// </summary>
    public string MobilePhone => _item.String("MobilePhone", fallback: "");

    /// <summary>
    /// ModuleId as int. <br/>
    /// To get other types use methods such as .Decimal("ModuleId")
    /// </summary>
    public int ModuleId => _item.Int("ModuleId");

    /// <summary>
    /// Phone as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Phone", scrubHtml: true) etc.
    /// </summary>
    public string Phone => _item.String("Phone", fallback: "");

    /// <summary>
    /// Salutation as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Salutation", scrubHtml: true) etc.
    /// </summary>
    public string Salutation => _item.String("Salutation", fallback: "");

    /// <summary>
    /// SenderIP as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("SenderIP", scrubHtml: true) etc.
    /// </summary>
    public string SenderIP => _item.String("SenderIP", fallback: "");

    /// <summary>
    /// Street as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Street", scrubHtml: true) etc.
    /// </summary>
    public string Street => _item.String("Street", fallback: "");

    /// <summary>
    /// Timestamp as DateTime.
    /// </summary>
    public DateTime Timestamp => _item.DateTime("Timestamp");

    /// <summary>
    /// ZIPCity as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ZIPCity", scrubHtml: true) etc.
    /// </summary>
    public string ZIPCity => _item.String("ZIPCity", fallback: "");
  }
}