// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Job.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Job
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Jobs/
// User:        2sic Web-Developer
// When:        2024-04-08 07:53:49Z
using System;
using System.Collections.Generic;
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for Job 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Job data. <br/>
  /// Generated 2024-04-08 07:53:49Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Categories`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Job: AutoGenerated.ZagJob
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Job in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagJob: Custom.Data.CustomItem
  {
    /// <summary>
    /// Categories as list of Category.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type Category was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<Category> Categories => _categories ??= _item.Children<Category>("Categories");
    private IEnumerable<Category> _categories;

    /// <summary>
    /// Date as DateTime.
    /// </summary>
    public DateTime Date => _item.DateTime("Date");

    /// <summary>
    /// Description as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Description", scrubHtml: true) etc.
    /// </summary>
    public string Description => _item.String("Description", fallback: "");

    /// <summary>
    /// EmploymentType as single item of EmploymentType.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type EmploymentType was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public EmploymentType EmploymentType => _employmentType ??= _item.Child<EmploymentType>("EmploymentType");
    private EmploymentType _employmentType;

    /// <summary>
    /// Image as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Image")
    /// </summary>
    public string Image => _item.Url("Image");

    /// <summary>
    /// Get the file object for Image - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile ImageFile => _item.File("Image");

    /// <summary>
    /// Get the folder object for Image.
    /// </summary>
    public IFolder ImageFolder => _item.Folder("Image");

    /// <summary>
    /// Intro as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Intro", scrubHtml: true) etc.
    /// </summary>
    public string Intro => _item.String("Intro", fallback: "");

    /// <summary>
    /// Link as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Link")
    /// </summary>
    public string Link => _item.Url("Link");

    /// <summary>
    /// Get the file object for Link - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile LinkFile => _item.File("Link");

    /// <summary>
    /// Get the folder object for Link.
    /// </summary>
    public IFolder LinkFolder => _item.Folder("Link");

    /// <summary>
    /// Name as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Name", scrubHtml: true) etc.
    /// </summary>
    public string Name => _item.String("Name", fallback: "");

    /// <summary>
    /// OurOffer as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("OurOffer", scrubHtml: true) etc.
    /// </summary>
    public string OurOffer => _item.String("OurOffer", fallback: "");

    /// <summary>
    /// Outro as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Outro", scrubHtml: true) etc.
    /// </summary>
    public string Outro => _item.String("Outro", fallback: "");

    /// <summary>
    /// Priority as int. <br/>
    /// To get other types use methods such as .Decimal("Priority")
    /// </summary>
    public int Priority => _item.Int("Priority");

    /// <summary>
    /// Qualifications as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Qualifications", scrubHtml: true) etc.
    /// </summary>
    public string Qualifications => _item.String("Qualifications", fallback: "");

    /// <summary>
    /// Tasks as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Tasks", scrubHtml: true) etc.
    /// </summary>
    public string Tasks => _item.String("Tasks", fallback: "");
  }
}